pwd 查看当前所在文件夹

cd ..

fandepeng1993
fdp270178123
ls

cd /d 查找D盘

cd jingjiling/ 查找文件夹

git init 将该目录变成git文件

git clone SSH 拉代码

git add 修改后的文件的名字 添加修改后的文件到仓库

git commit 将仓库里修改后的文件提交
  -m "修改原因"

git push 提交以后要push推送到远程仓库
 
git checkout
   -- 文件名 撤销修改
      修改后还没有被放到暂存区，撤销修改就回到和版本库一模一样的状态
      已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态

git reset HEAD 文件名 把暂存区的修改撤销掉，重新放回工作区

git rm 文件名 用于删除文件

git log 显示最后一次修改以及上传者

git show 显示修改代码的内容
         修改后的编号 可查看该编号修改的代码

git remote -v 查看远程库信息

git pull 拉代码（看看别人代码有没有修改，如果修改了要先拉下代码再进行提交）
提示“no tracking information”说明本地分支和远程分支的链接关系没有创建

//(不再支持) git branch --set-upstream 分支名 本地分支名（创建本地分支和远程分支的链接关系）
git branch --set-upstream-to origin/分支名

自动创建一个新的本地分支，并与指定的远程分支关联起来
git checkout -b 本地分支名 origin/远程分支名


git status 查看还没有被git管理的文件和被git管理且被修改但还未提交的文件

git branch 
  查看当前分支
  分支名  创建分支
  -a 查看远程分支
  git checkout 分之名  //切换到当前分支
  -r  查看远程分支
  -d 分之名 删除当前分支
  git checkout -b 分之名  创建并切换到当前分支
  git merge 分之名  合并某分支到当前分支

git remote add origin SSH 关联一个远程库 



驻场
服务器代理 172.31.1.246 ：80
vpn 
username fandepeng password fandepeng09254389
 exportImage() {
    const el = this.services.$element[0];
    //console.log(el.scrollWidth, el.scrollHeight);
    html2svg(el, {
      backgroundColor: '#F6F5F4',
      padding: '8px 16px',
    }, {
      width: el.scrollWidth + 32,
      height: el.scrollHeight + 16,
    })
    .then(svg => {
      const svgContent = new XMLSerializer().serializeToString(svg);
      return new Promise((resolve, reject) => {
        const img = new Image();
        img.onload = () => resolve(img);
        img.onerror = e => reject(e);
        img.src = 'data:image/svg+xml,' + encodeURIComponent(svgContent);
      });
    })
    .then(img => {
      const canvas = document.createElement('canvas');
      const devicePixelRatio = window.devicePixelRatio || 1;
      // const devicePixelRatio =  1;
      //console.log(img.src);
      //console.log(devicePixelRatio, img.naturalWidth * devicePixelRatio, img.naturalHeight * devicePixelRatio, document.documentElement.clientHeight)
      canvas.width = img.naturalWidth * devicePixelRatio;
      canvas.height = img.naturalHeight * devicePixelRatio;

      const ctx = canvas.getContext('2d');
      ctx.scale(devicePixelRatio, devicePixelRatio);
      ctx.drawImage(img, 0, 0);
      return new Promise(resolve => canvas.toBlob(resolve));
      //return canvas.toDataURL('image/png');
    })
    .then(blob => {
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.download = this.savedDashboard.title + '.png';
      a.href = url;
      a.click();
      URL.revokeObjectURL(url);

      /*const a = document.createElement('a');
      a.download = this.savedDashboard.title + '.png';
      a.href = data;
      a.click();*/
    })
    .catch(e => console.error(e));
  }
}




